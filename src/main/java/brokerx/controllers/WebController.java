package brokerx.controllers;

import brokerx.entity.Client;
import brokerx.service.ClientService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.beans.propertyeditors.StringTrimmerEditor;
import jakarta.validation.Valid;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * Contr√¥leur monolithique MVC pour BrokerX
 * G√®re l'inscription et la v√©rification des clients
 */
@Controller
public class WebController {

    @Autowired
    private ClientService clientService;
    
    // Stockage temporaire des sessions de v√©rification
    private final Map<String, SessionVerification> sessions = new HashMap<>();

    /**
     * Configuration du binding pour les formulaires
     */
    @InitBinder
    public void initBinder(WebDataBinder binder) {
        // Trimmer pour supprimer les espaces en d√©but/fin
        binder.registerCustomEditor(String.class, new StringTrimmerEditor(true));
    }

    @GetMapping("/")
    public String home(Model model) {
        model.addAttribute("pageTitle", "BrokerX - Plateforme de Courtage");
        return "home";
    }

    @GetMapping("/inscription")
    public String inscription(Model model) {
        model.addAttribute("pageTitle", "Inscription - BrokerX");
        if (!model.containsAttribute("client")) {
            model.addAttribute("client", new Client());
        }
        return "inscription";
    }
    
    @PostMapping("/inscription")
    public String traiterInscription(@Valid @ModelAttribute("client") Client client,
                                   BindingResult result,
                                   Model model,
                                   RedirectAttributes redirectAttributes) {
        
        // Debug: afficher les valeurs re√ßues
        System.out.println("DEBUG - Donn√©es re√ßues:");
        System.out.println("  - Pr√©nom: " + client.getPrenom());
        System.out.println("  - Nom: " + client.getNom());
        System.out.println("  - Email: " + client.getEmail());
        System.out.println("  - T√©l√©phone: " + client.getTelephone());
        System.out.println("  - Date de naissance: " + client.getDateNaissance());
        System.out.println("  - Adresse: " + client.getAdresse());
        System.out.println("  - Erreurs: " + result.hasErrors());
        if (result.hasErrors()) {
            System.out.println("  - D√©tails erreurs: " + result.getAllErrors());
        }
        
        if (result.hasErrors()) {
            model.addAttribute("pageTitle", "Inscription - BrokerX");
            return "inscription";
        }
        
        try {
            // Cr√©er le client avec v√©rifications (CU01 - √âtape 2)
            ClientService.CreationResult creationResult = clientService.creerClientAvecVerification(client);
            
            // Cr√©er session de v√©rification pour le processus web avec les codes g√©n√©r√©s
            String sessionId = java.util.UUID.randomUUID().toString();
            SessionVerification session = new SessionVerification();
            session.email = creationResult.getClient().getEmail();
            session.codeEmail = creationResult.getCodeEmail();
            session.codeOTP = creationResult.getCodeOTP();
            sessions.put(sessionId, session);
            
            System.out.println("üéØ CU01 - √âtape 2 compl√©t√©e: Compte PENDING cr√©√© avec notifications envoy√©es");
            System.out.println("üìù Session cr√©√©e - ID: " + sessionId);
            System.out.println("üìß Email: " + session.email);
            System.out.println("üîë Code Email: " + session.codeEmail);
            System.out.println("üì± Code OTP: " + session.codeOTP);
            System.out.println("üóÇÔ∏è Sessions actives: " + sessions.size());
            
            redirectAttributes.addAttribute("sessionId", sessionId);
            redirectAttributes.addFlashAttribute("email", creationResult.getClient().getEmail());
            return "redirect:/inscription-confirmation";
            
        } catch (IllegalArgumentException e) {
            // Gestion des erreurs de compte existant
            if (e.getMessage().contains("email")) {
                result.rejectValue("email", "error.client", e.getMessage());
            } else if (e.getMessage().contains("t√©l√©phone")) {
                result.rejectValue("telephone", "error.client", e.getMessage());
            } else {
                result.reject("error.client", e.getMessage());
            }
            
            model.addAttribute("pageTitle", "Inscription - BrokerX");
            return "inscription";
        }
    }

    @GetMapping("/verification-email-session")
    public String verificationEmail(@RequestParam(required = false) String sessionId, Model model) {
        System.out.println("üîç ACC√àS GET /verification-email-session avec sessionId: " + sessionId);
        
        // V√©rifier si le sessionId est fourni
        if (sessionId == null || sessionId.trim().isEmpty()) {
            model.addAttribute("error", "Session manquante. Veuillez recommencer l'inscription.");
            return "redirect:/inscription";
        }
        
        // V√©rifier si la session existe
        SessionVerification session = sessions.get(sessionId);
        if (session == null) {
            System.out.println("Session introuvable pour sessionId: " + sessionId);
            model.addAttribute("error", "Session expir√©e ou invalide. Veuillez recommencer l'inscription.");
            return "redirect:/inscription";
        }
        
        System.out.println("Session trouvee pour email: " + session.email);
        model.addAttribute("pageTitle", "Verification Email - BrokerX");
        model.addAttribute("sessionId", sessionId);
        model.addAttribute("email", session.email);
        return "verification-email";
    }

    @PostMapping("/verification-email")
    public String traiterVerificationEmail(@RequestParam String sessionId,
                                         @RequestParam String codeVerification,
                                         Model model,
                                         RedirectAttributes redirectAttributes) {
        
        SessionVerification session = sessions.get(sessionId);
        if (session == null) {
            model.addAttribute("pageTitle", "V√©rification Email - BrokerX");
            model.addAttribute("sessionId", sessionId);
            model.addAttribute("error", "Session expir√©e");
            return "verification-email";
        }
        
        // Validation du code de v√©rification email
        if (codeVerification == null || codeVerification.trim().isEmpty()) {
            model.addAttribute("pageTitle", "V√©rification Email - BrokerX");
            model.addAttribute("sessionId", sessionId);
            model.addAttribute("error", "Veuillez saisir le code de v√©rification");
            return "verification-email";
        }
        
        // V√©rifier si le code correspond √† celui g√©n√©r√©
        if (!codeVerification.trim().equals(session.codeEmail)) {
            model.addAttribute("pageTitle", "V√©rification Email - BrokerX");
            model.addAttribute("sessionId", sessionId);
            model.addAttribute("error", "Code de v√©rification incorrect. V√©rifiez votre email.");
            return "verification-email";
        }
        
        // Code email valid√© avec succ√®s - ACTIVATION AVEC AUDIT
        //System.out.println("Verification email reussie pour: " + session.email + " avec code: " + codeVerification);
        
        // ACTIVER LE COMPTE AVEC JOURNALISATION D'AUDIT COMPL√àTE
        // Impl√©mente: "Le Syst√®me passe le compte √† Active et journalise l'audit (horodatage, empreinte des documents)"
        String auditId = clientService.activerCompteAvecAudit(session.email, codeVerification);
        session.emailVerifie = true;
        
        // üéâ Inscription compl√®tement termin√©e avec audit
        System.out.println("üéâ Compte ACTIV√â avec audit pour: " + session.email + " | ID Audit: " + auditId);
        
        // Supprimer la session car le processus est termin√©
        sessions.remove(sessionId);
        
        redirectAttributes.addFlashAttribute("message", "F√©licitations ! Votre compte est maintenant actif. Vous pouvez vous connecter.");
        redirectAttributes.addFlashAttribute("email", session.email);
        return "redirect:/inscription/succes";
    }

    @GetMapping("/verification-otp")
    public String verificationOtp(@RequestParam String sessionId, Model model) {
        model.addAttribute("pageTitle", "V√©rification OTP - BrokerX");
        model.addAttribute("sessionId", sessionId);
        return "verification-otp";
    }

    @PostMapping("/verification-otp")
    public String traiterVerificationOTP(@RequestParam String sessionId,
                                       @RequestParam String codeVerification,
                                       Model model,
                                       RedirectAttributes redirectAttributes) {
        
        SessionVerification session = sessions.get(sessionId);
        
        // V√©rifications de s√©curit√©
        if (session == null) {
            model.addAttribute("pageTitle", "V√©rification OTP - BrokerX");
            model.addAttribute("sessionId", sessionId);
            model.addAttribute("error", "Session expir√©e. Veuillez recommencer l'inscription.");
            return "verification-otp";
        }
        
        if (!session.emailVerifie) {
            model.addAttribute("pageTitle", "V√©rification OTP - BrokerX");
            model.addAttribute("sessionId", sessionId);
            model.addAttribute("error", "Veuillez d'abord v√©rifier votre email.");
            return "verification-otp";
        }
        
        // Validation du code OTP
        if (codeVerification == null || codeVerification.trim().isEmpty()) {
            model.addAttribute("pageTitle", "V√©rification OTP - BrokerX");
            model.addAttribute("sessionId", sessionId);
            model.addAttribute("error", "Veuillez saisir le code re√ßu par SMS");
            return "verification-otp";
        }
        
        if (!codeVerification.trim().equals(session.codeOTP)) {
            model.addAttribute("pageTitle", "V√©rification OTP - BrokerX");
            model.addAttribute("sessionId", sessionId);
            model.addAttribute("error", "Code SMS incorrect. V√©rifiez le code re√ßu sur votre t√©l√©phone.");
            return "verification-otp";
        }
        
        // ‚úÖ Code OTP valid√© avec succ√®s
        System.out.println("‚úÖ V√©rification OTP r√©ussie pour: " + session.email + " avec code: " + codeVerification);
        clientService.marquerTelephoneVerifie(session.email);
        
        // üéâ Inscription compl√®tement termin√©e
        System.out.println("üéâ Inscription compl√®te avec email et t√©l√©phone v√©rifi√©s pour: " + session.email);
        redirectAttributes.addFlashAttribute("message", "Inscription r√©ussie ! Votre compte est maintenant enti√®rement activ√©.");
        return "redirect:/inscription/succes";
    }

    @GetMapping("/inscription-confirmation")
    public String inscriptionConfirmation(@RequestParam String sessionId, Model model) {
        System.out.println("üìã ACC√àS /inscription-confirmation avec sessionId: " + sessionId);
        
        SessionVerification session = sessions.get(sessionId);
        if (session == null) {
            System.out.println("‚ùå Session introuvable dans /inscription-confirmation");
            model.addAttribute("error", "Session expir√©e ou invalide");
            return "redirect:/inscription";
        }
        
        System.out.println("‚úÖ Session trouv√©e pour /inscription-confirmation - Email: " + session.email);
        model.addAttribute("pageTitle", "V√©rifiez votre email - BrokerX");
        model.addAttribute("sessionId", sessionId);
        model.addAttribute("email", session.email);
        
        System.out.println("üîó SessionId ajout√© au mod√®le: " + sessionId);
        return "inscription-confirmation";
    }

    /**
     * Route pour v√©rification directe via lien email (crit√®re d'acceptation)
     * Permet de "cliquer sur le lien" comme sp√©cifi√© dans les crit√®res
     */
    @GetMapping("/verification-email")
    public String verificationEmailDepuisLien(@RequestParam(required = false) String code, 
                                             @RequestParam(required = false) String sessionId,
                                             Model model) {
        // Si c'est un lien direct depuis l'email avec code
        if (code != null && !code.trim().isEmpty()) {
            System.out.println("üîó ACC√àS via lien email avec code: " + code);
            
            // Trouver la session correspondant au code
            for (Map.Entry<String, SessionVerification> entry : sessions.entrySet()) {
                SessionVerification session = entry.getValue();
                if (code.equals(session.codeEmail)) {
                    System.out.println("‚úÖ Session trouv√©e pour code email: " + session.email);
                    
                    // Activer directement le compte (crit√®re: "clique sur le lien, et son compte est activ√©")
                    String auditId = clientService.activerCompteAvecAudit(session.email, code);
                    
                    // Supprimer la session
                    sessions.remove(entry.getKey());
                    
                    model.addAttribute("message", "F√©licitations ! Votre compte a √©t√© activ√© en cliquant sur le lien. Vous pouvez maintenant vous connecter.");
                    model.addAttribute("email", session.email);
                    model.addAttribute("auditId", auditId);
                    return "inscription-succes";
                }
            }
            
            // Code non trouv√©
            model.addAttribute("error", "Lien de v√©rification invalide ou expir√©. Veuillez recommencer l'inscription.");
            return "redirect:/inscription";
        }
        
        // Si c'est un acc√®s normal avec sessionId (existant) - rediriger vers la route sp√©cialis√©e
        if (sessionId != null && !sessionId.trim().isEmpty()) {
            return "redirect:/verification-email-session?sessionId=" + sessionId;
        }
        
        // Aucun param√®tre valide
        model.addAttribute("error", "Acc√®s invalide. Veuillez recommencer l'inscription.");
        return "redirect:/inscription";
    }

    @GetMapping("/inscription/succes")
    public String inscriptionSucces(Model model) {
        model.addAttribute("pageTitle", "Inscription R√©ussie - BrokerX");
        return "inscription-succes";
    }

    @GetMapping("/connexion")
    public String connexion(Model model) {
        model.addAttribute("pageTitle", "Connexion - BrokerX");
        return "connexion";
    }
    
    @PostMapping("/connexion")
    public String connexionPost(@RequestParam String email,
                               @RequestParam String motDePasse,
                               Model model,
                               RedirectAttributes redirectAttributes) {
        
        try {
            // V√©rifier si l'utilisateur existe et si le mot de passe est correct
            Optional<Client> clientOpt = clientService.trouverParEmail(email);
            
            if (clientOpt.isEmpty()) {
                model.addAttribute("error", "Email ou mot de passe incorrect.");
                model.addAttribute("email", email);
                return "connexion";
            }
            
            Client client = clientOpt.get();
            
            // V√©rifier le mot de passe
            if (!client.getMotDePasse().equals(motDePasse)) {
                model.addAttribute("error", "Email ou mot de passe incorrect.");
                model.addAttribute("email", email);
                return "connexion";
            }
            
            // V√©rifier si le compte est actif
            if (!client.isCompteActif()) {
                model.addAttribute("error", "Votre compte n'est pas encore activ√©. Veuillez v√©rifier votre email.");
                model.addAttribute("email", email);
                return "connexion";
            }
            
            // Connexion r√©ussie - rediriger vers la page d'accueil avec message
            redirectAttributes.addFlashAttribute("message", "Connexion r√©ussie ! Bienvenue " + client.getNom() + ".");
            return "redirect:/";
            
        } catch (Exception e) {
            model.addAttribute("error", "Une erreur s'est produite lors de la connexion.");
            model.addAttribute("email", email);
            return "connexion";
        }
    }
    
    // Classe interne pour les sessions de v√©rification
    private static class SessionVerification {
        String email;
        String codeEmail;
        String codeOTP;
        boolean emailVerifie = false;
    }
}